@model IEnumerable<FileConvertPro.Models.FileConversion>

@{
    ViewData["Title"] = "Conversion Logs";
}

<div class="container-fluid">
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800"><i class="fas fa-history me-2"></i> Conversion Logs</h1>
        <div>
            <a href="#" class="btn btn-sm btn-outline-primary me-2" data-bs-toggle="modal" data-bs-target="#filterModal">
                <i class="fas fa-filter me-1"></i> Filter
            </a>
            <a href="#" class="btn btn-sm btn-primary shadow-sm">
                <i class="fas fa-download fa-sm text-white-50 me-1"></i> Export Logs
            </a>
        </div>
    </div>

    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
            <h6 class="m-0 font-weight-bold text-primary">All Conversions</h6>
            <div class="input-group w-50">
                <input type="text" id="conversionSearchInput" class="form-control bg-light border-0 small" placeholder="Search for conversions..." aria-label="Search">
                <div class="input-group-append">
                    <button class="btn btn-primary" type="button">
                        <i class="fas fa-search fa-sm"></i>
                    </button>
                </div>
            </div>
        </div>
        <div class="card-body">
            @if (Model.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover" id="conversionsTable">
                        <thead>
                            <tr>
                                <th>User</th>
                                <th>Original File</th>
                                <th>Converted File</th>
                                <th>Type</th>
                                <th>Status</th>
                                <th>Created</th>
                                <th>Completed</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var conversion in Model)
                            {
                                <tr>
                                    <td>@conversion.User.Email</td>
                                    <td>@conversion.OriginalFileName</td>
                                    <td>@(conversion.Status == ConversionStatus.Completed ? conversion.ConvertedFileName : "-")</td>
                                    <td>
                                        <span class="badge bg-primary">@conversion.ConversionType.ToString()</span>
                                    </td>
                                    <td>
                                        @switch (conversion.Status)
                                        {
                                            case ConversionStatus.Pending:
                                                <span class="badge bg-warning text-dark">Pending</span>
                                                break;
                                            case ConversionStatus.Processing:
                                                <span class="badge bg-info">Processing</span>
                                                break;
                                            case ConversionStatus.Completed:
                                                <span class="badge bg-success">Completed</span>
                                                break;
                                            case ConversionStatus.Failed:
                                                <span class="badge bg-danger">Failed</span>
                                                break;
                                        }
                                    </td>
                                    <td>@conversion.CreatedAt.ToString("g")</td>
                                    <td>@(conversion.CompletedAt.HasValue ? conversion.CompletedAt.Value.ToString("g") : "-")</td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <a asp-action="ConversionDetails" asp-route-id="@conversion.Id" class="btn btn-sm btn-outline-primary">
                                                <i class="fas fa-info-circle"></i>
                                            </a>
                                            @if (conversion.Status == ConversionStatus.Completed)
                                            {
                                                <a asp-action="DownloadConversion" asp-route-id="@conversion.Id" class="btn btn-sm btn-outline-success">
                                                    <i class="fas fa-download"></i>
                                                </a>
                                            }
                                            <a href="#" class="btn btn-sm btn-outline-danger" data-bs-toggle="modal" data-bs-target="#deleteModal" data-conversion-id="@conversion.Id" data-file-name="@conversion.OriginalFileName">
                                                <i class="fas fa-trash"></i>
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                
                <div class="d-flex justify-content-between align-items-center mt-4">
                    <div>
                        <span class="text-muted">Showing @Model.Count() conversions</span>
                    </div>
                    <nav aria-label="Page navigation">
                        <ul class="pagination">
                            <li class="page-item disabled">
                                <a class="page-link" href="#" tabindex="-1" aria-disabled="true">Previous</a>
                            </li>
                            <li class="page-item active"><a class="page-link" href="#">1</a></li>
                            <li class="page-item"><a class="page-link" href="#">2</a></li>
                            <li class="page-item"><a class="page-link" href="#">3</a></li>
                            <li class="page-item">
                                <a class="page-link" href="#">Next</a>
                            </li>
                        </ul>
                    </nav>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="fas fa-exchange-alt fa-4x text-gray-300 mb-4"></i>
                    <p class="lead text-gray-800">No conversions found</p>
                    <p class="text-muted">There are no file conversions in the system yet.</p>
                </div>
            }
        </div>
    </div>
    
    <div class="row">
        <div class="col-lg-6">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Conversion Status Distribution</h6>
                </div>
                <div class="card-body">
                    <div class="chart-pie pt-4 pb-2">
                        <canvas id="statusChart"></canvas>
                    </div>
                    <div class="mt-4 text-center small">
                        <span class="mr-2">
                            <i class="fas fa-circle text-success"></i> Completed
                        </span>
                        <span class="mr-2">
                            <i class="fas fa-circle text-warning"></i> Pending
                        </span>
                        <span class="mr-2">
                            <i class="fas fa-circle text-info"></i> Processing
                        </span>
                        <span class="mr-2">
                            <i class="fas fa-circle text-danger"></i> Failed
                        </span>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-lg-6">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Conversion Types Distribution</h6>
                </div>
                <div class="card-body">
                    <div class="chart-bar pt-4 pb-2">
                        <canvas id="typesChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Filter Modal -->
<div class="modal fade" id="filterModal" tabindex="-1" aria-labelledby="filterModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="filterModalLabel">Filter Conversions</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="mb-3">
                        <label for="statusFilter" class="form-label">Status</label>
                        <select class="form-select" id="statusFilter">
                            <option value="">All Statuses</option>
                            <option value="Pending">Pending</option>
                            <option value="Processing">Processing</option>
                            <option value="Completed">Completed</option>
                            <option value="Failed">Failed</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="typeFilter" class="form-label">Conversion Type</label>
                        <select class="form-select" id="typeFilter">
                            <option value="">All Types</option>
                            <option value="JpgToPng">JPG to PNG</option>
                            <option value="PngToJpg">PNG to JPG</option>
                            <option value="JpgToWebp">JPG to WebP</option>
                            <option value="PngToWebp">PNG to WebP</option>
                            <option value="WebpToJpg">WebP to JPG</option>
                            <option value="WebpToPng">WebP to PNG</option>
                            <option value="MdbToCsv">MDB to CSV</option>
                            <option value="MdvToPdf">MDV to PDF</option>
                            <option value="PdfToDocx">PDF to DOCX</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="dateRangeFilter" class="form-label">Date Range</label>
                        <div class="input-group">
                            <input type="date" class="form-control" id="startDateFilter">
                            <span class="input-group-text">to</span>
                            <input type="date" class="form-control" id="endDateFilter">
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="userFilter" class="form-label">User Email</label>
                        <input type="email" class="form-control" id="userFilter" placeholder="Filter by user email">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary">Apply Filters</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the conversion record for <strong id="deleteFileName"></strong>?</p>
                <p class="text-danger">This action cannot be undone. The conversion record and associated files will be permanently deleted.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form asp-action="DeleteConversion" method="post">
                    <input type="hidden" id="deleteConversionId" name="ConversionId" />
                    <button type="submit" class="btn btn-danger">Delete Conversion</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        $(document).ready(function() {
            // Search functionality
            $("#conversionSearchInput").on("keyup", function() {
                var value = $(this).val().toLowerCase();
                $("#conversionsTable tbody tr").filter(function() {
                    $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
                });
            });
            
            // Set conversion data in delete modal
            $('#deleteModal').on('show.bs.modal', function (event) {
                var button = $(event.relatedTarget);
                var conversionId = button.data('conversion-id');
                var fileName = button.data('file-name');
                var modal = $(this);
                modal.find('#deleteConversionId').val(conversionId);
                modal.find('#deleteFileName').text(fileName);
            });
            
            // Status distribution chart
            var statusCtx = document.getElementById("statusChart");
            var statusChart = new Chart(statusCtx, {
                type: 'doughnut',
                data: {
                    labels: ["Completed", "Pending", "Processing", "Failed"],
                    datasets: [{
                        data: [
                            @Model.Count(c => c.Status == ConversionStatus.Completed),
                            @Model.Count(c => c.Status == ConversionStatus.Pending),
                            @Model.Count(c => c.Status == ConversionStatus.Processing),
                            @Model.Count(c => c.Status == ConversionStatus.Failed)
                        ],
                        backgroundColor: ['#1cc88a', '#f6c23e', '#36b9cc', '#e74a3b'],
                        hoverBackgroundColor: ['#17a673', '#dda20a', '#2c9faf', '#be2617'],
                        hoverBorderColor: "rgba(234, 236, 244, 1)",
                    }],
                },
                options: {
                    maintainAspectRatio: false,
                    tooltips: {
                        backgroundColor: "rgb(255,255,255)",
                        bodyFontColor: "#858796",
                        borderColor: '#dddfeb',
                        borderWidth: 1,
                        xPadding: 15,
                        yPadding: 15,
                        displayColors: false,
                        caretPadding: 10,
                    },
                    legend: {
                        display: false
                    },
                    cutoutPercentage: 80,
                },
            });
            
            // Conversion types chart
            var typesCtx = document.getElementById("typesChart");
            var typesChart = new Chart(typesCtx, {
                type: 'bar',
                data: {
                    labels: ["JPG to PNG", "PNG to JPG", "JPG to WebP", "PNG to WebP", "WebP to JPG", "WebP to PNG", "MDB to CSV", "MDV to PDF", "PDF to DOCX"],
                    datasets: [{
                        label: "Conversions",
                        backgroundColor: "#4e73df",
                        hoverBackgroundColor: "#2e59d9",
                        borderColor: "#4e73df",
                        data: [
                            @Model.Count(c => c.ConversionType == ConversionType.JpgToPng),
                            @Model.Count(c => c.ConversionType == ConversionType.PngToJpg),
                            @Model.Count(c => c.ConversionType == ConversionType.JpgToWebp),
                            @Model.Count(c => c.ConversionType == ConversionType.PngToWebp),
                            @Model.Count(c => c.ConversionType == ConversionType.WebpToJpg),
                            @Model.Count(c => c.ConversionType == ConversionType.WebpToPng),
                            @Model.Count(c => c.ConversionType == ConversionType.MDBToCSV),
                            @Model.Count(c => c.ConversionType == ConversionType.MdvToPdf),
                            @Model.Count(c => c.ConversionType == ConversionType.PdfToDocx)
                        ],
                    }],
                },
                options: {
                    maintainAspectRatio: false,
                    layout: {
                        padding: {
                            left: 10,
                            right: 25,
                            top: 25,
                            bottom: 0
                        }
                    },
                    scales: {
                        xAxes: [{
                            gridLines: {
                                display: false,
                                drawBorder: false
                            },
                            ticks: {
                                maxTicksLimit: 6
                            },
                            maxBarThickness: 25,
                        }],
                        yAxes: [{
                            ticks: {
                                min: 0,
                                maxTicksLimit: 5,
                                padding: 10,
                            },
                            gridLines: {
                                color: "rgb(234, 236, 244)",
                                zeroLineColor: "rgb(234, 236, 244)",
                                drawBorder: false,
                                borderDash: [2],
                                zeroLineBorderDash: [2]
                            }
                        }],
                    },
                    legend: {
                        display: false
                    },
                    tooltips: {
                        titleMarginBottom: 10,
                        titleFontColor: '#6e707e',
                        titleFontSize: 14,
                        backgroundColor: "rgb(255,255,255)",
                        bodyFontColor: "#858796",
                        borderColor: '#dddfeb',
                        borderWidth: 1,
                        xPadding: 15,
                        yPadding: 15,
                        displayColors: false,
                        caretPadding: 10,
                    },
                }
            });
        });
    </script>
}
